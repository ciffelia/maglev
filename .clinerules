# Cline Rules

## プロジェクトについて

このプロジェクトでは、プロダクト「Magrev」を開発しています。MagrevはCI/CDで実行されるテストの結果をわかりやすく表示するWebアプリケーションです。ソフトウェアエンジニアのアプリケーション開発を助けることを目的としています。特にハッカソンなど、頻繁にコードを変更する短期間での開発を支援することを目指しています。

## 処理の流れ

CI/CDのテスト実行基盤は、REST APIを通じてMagrevのバックエンドにテスト結果を送信します。バックエンドはデータベースにテスト結果を保存します。Magrevのフロントエンドは、REST APIを通じてバックエンドからテスト結果を取得します。

## アーキテクチャ

このアプリケーション全体では以下の技術を使用しています。

- pnpm workspace
- TypeScript
- ESLint
- Prettier
- Vite

アプリケーションの主要なコンポーネントは以下の通りです。なお、CI/CDのテスト実行基盤はこのアプリケーションに含まれていません。

### フロントエンド

- **パッケージ**: `@magrev/frontend`
- **技術**: React 19, Hono RPC Client
- **構造**: シングルページアプリケーション（SPA）
- **エントリーポイント**: `packages/frontend/src/main.tsx`

### バックエンド

- **パッケージ**: `@magrev/backend`
- **技術**: Cloudflare Workers, Hono, Drizzle ORM
- **エントリーポイント**: `packages/backend/src/index.ts`

### データベース

- **技術**: Cloudflare D1（SQLiteベース）
- **スキーマ**: `packages/backend/src/db/schema.ts`

## 開発における注意事項

- このアプリケーションのフロントエンドおよびバックエンド開発サーバーは既にポート5173で起動しているはずです。改めて`pnpm run dev`を実行してはいけません。もし開発サーバーが起動していないと思われる場合は、直ちにユーザーに確認してください。開発サーバーの再起動が必要な場合は、ユーザーに再起動を要求してください。
- テストを実行するには`pnpm run test run`を実行してください。`pnpm run test`を実行してはいけません。`pnpm run test`ではVitestがwatch modeで起動し、コマンドが終了しません。
- ブラウザ起動時にエラーが発生した場合は、ユーザーに解決を依頼してください。
- `wrangler.jsonc`や`.dev.vars`を編集してWorkersの設定を更新した際は、TypeScriptの型定義を更新するために`pnpm run cf-typegen`を実行してください。
- DBスキーマ (`schema.ts`) を編集した際は、マイグレーションファイルを生成するために`pnpm run migration:generate`を実行してください。マイグレーションファイルを生成したら、マイグレーションを適用するために`pnpm run migration:apply:local`を実行してください。
